// Code generated by entc, DO NOT EDIT.

package run

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the run type in the database.
	Label = "run"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldJob holds the string denoting the job field in the database.
	FieldJob = "job"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLog holds the string denoting the log field in the database.
	FieldLog = "log"
	// Table holds the table name of the run in the database.
	Table = "runs"
)

// Columns holds all SQL columns for run fields.
var Columns = []string{
	FieldID,
	FieldJob,
	FieldStart,
	FieldEnd,
	FieldStatus,
	FieldLog,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStart holds the default value on creation for the "start" field.
	DefaultStart func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusRunning    Status = "running"
	StatusFailed     Status = "failed"
	StatusSuccessful Status = "successful"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusRunning, StatusFailed, StatusSuccessful:
		return nil
	default:
		return fmt.Errorf("run: invalid enum value for status field: %q", s)
	}
}
