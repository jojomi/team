// Code generated by entc, DO NOT EDIT.

package run

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jojomi/team/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Job applies equality check predicate on the "job" field. It's identical to JobEQ.
func Job(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJob), v))
	})
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnd), v))
	})
}

// Log applies equality check predicate on the "log" field. It's identical to LogEQ.
func Log(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLog), v))
	})
}

// JobEQ applies the EQ predicate on the "job" field.
func JobEQ(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJob), v))
	})
}

// JobNEQ applies the NEQ predicate on the "job" field.
func JobNEQ(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJob), v))
	})
}

// JobIn applies the In predicate on the "job" field.
func JobIn(vs ...string) predicate.Run {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJob), v...))
	})
}

// JobNotIn applies the NotIn predicate on the "job" field.
func JobNotIn(vs ...string) predicate.Run {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJob), v...))
	})
}

// JobGT applies the GT predicate on the "job" field.
func JobGT(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJob), v))
	})
}

// JobGTE applies the GTE predicate on the "job" field.
func JobGTE(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJob), v))
	})
}

// JobLT applies the LT predicate on the "job" field.
func JobLT(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJob), v))
	})
}

// JobLTE applies the LTE predicate on the "job" field.
func JobLTE(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJob), v))
	})
}

// JobContains applies the Contains predicate on the "job" field.
func JobContains(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJob), v))
	})
}

// JobHasPrefix applies the HasPrefix predicate on the "job" field.
func JobHasPrefix(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJob), v))
	})
}

// JobHasSuffix applies the HasSuffix predicate on the "job" field.
func JobHasSuffix(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJob), v))
	})
}

// JobEqualFold applies the EqualFold predicate on the "job" field.
func JobEqualFold(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJob), v))
	})
}

// JobContainsFold applies the ContainsFold predicate on the "job" field.
func JobContainsFold(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJob), v))
	})
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStart), v))
	})
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...time.Time) predicate.Run {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStart), v...))
	})
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...time.Time) predicate.Run {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStart), v...))
	})
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStart), v))
	})
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStart), v))
	})
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStart), v))
	})
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStart), v))
	})
}

// StartIsNil applies the IsNil predicate on the "start" field.
func StartIsNil() predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStart)))
	})
}

// StartNotNil applies the NotNil predicate on the "start" field.
func StartNotNil() predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStart)))
	})
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnd), v))
	})
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnd), v))
	})
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...time.Time) predicate.Run {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnd), v...))
	})
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...time.Time) predicate.Run {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnd), v...))
	})
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnd), v))
	})
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnd), v))
	})
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnd), v))
	})
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v time.Time) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnd), v))
	})
}

// EndIsNil applies the IsNil predicate on the "end" field.
func EndIsNil() predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnd)))
	})
}

// EndNotNil applies the NotNil predicate on the "end" field.
func EndNotNil() predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnd)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Run {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Run {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// LogEQ applies the EQ predicate on the "log" field.
func LogEQ(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLog), v))
	})
}

// LogNEQ applies the NEQ predicate on the "log" field.
func LogNEQ(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLog), v))
	})
}

// LogIn applies the In predicate on the "log" field.
func LogIn(vs ...string) predicate.Run {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLog), v...))
	})
}

// LogNotIn applies the NotIn predicate on the "log" field.
func LogNotIn(vs ...string) predicate.Run {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Run(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLog), v...))
	})
}

// LogGT applies the GT predicate on the "log" field.
func LogGT(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLog), v))
	})
}

// LogGTE applies the GTE predicate on the "log" field.
func LogGTE(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLog), v))
	})
}

// LogLT applies the LT predicate on the "log" field.
func LogLT(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLog), v))
	})
}

// LogLTE applies the LTE predicate on the "log" field.
func LogLTE(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLog), v))
	})
}

// LogContains applies the Contains predicate on the "log" field.
func LogContains(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLog), v))
	})
}

// LogHasPrefix applies the HasPrefix predicate on the "log" field.
func LogHasPrefix(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLog), v))
	})
}

// LogHasSuffix applies the HasSuffix predicate on the "log" field.
func LogHasSuffix(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLog), v))
	})
}

// LogIsNil applies the IsNil predicate on the "log" field.
func LogIsNil() predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLog)))
	})
}

// LogNotNil applies the NotNil predicate on the "log" field.
func LogNotNil() predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLog)))
	})
}

// LogEqualFold applies the EqualFold predicate on the "log" field.
func LogEqualFold(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLog), v))
	})
}

// LogContainsFold applies the ContainsFold predicate on the "log" field.
func LogContainsFold(v string) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLog), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Run) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Run) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Run) predicate.Run {
	return predicate.Run(func(s *sql.Selector) {
		p(s.Not())
	})
}
