// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jojomi/team/ent/run"
)

// Run is the model entity for the Run schema.
type Run struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Job holds the value of the "job" field.
	Job string `json:"job,omitempty"`
	// Start holds the value of the "start" field.
	Start time.Time `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End time.Time `json:"end,omitempty"`
	// Status holds the value of the "status" field.
	Status run.Status `json:"status,omitempty"`
	// Log holds the value of the "log" field.
	Log          string `json:"log,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Run) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case run.FieldJob, run.FieldStatus, run.FieldLog:
			values[i] = new(sql.NullString)
		case run.FieldStart, run.FieldEnd:
			values[i] = new(sql.NullTime)
		case run.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Run fields.
func (r *Run) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case run.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case run.FieldJob:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job", values[i])
			} else if value.Valid {
				r.Job = value.String
			}
		case run.FieldStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				r.Start = value.Time
			}
		case run.FieldEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				r.End = value.Time
			}
		case run.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = run.Status(value.String)
			}
		case run.FieldLog:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field log", values[i])
			} else if value.Valid {
				r.Log = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Run.
// This includes values selected through modifiers, order, etc.
func (r *Run) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Run.
// Note that you need to call Run.Unwrap() before calling this method if this Run
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Run) Update() *RunUpdateOne {
	return NewRunClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Run entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Run) Unwrap() *Run {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Run is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Run) String() string {
	var builder strings.Builder
	builder.WriteString("Run(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("job=")
	builder.WriteString(r.Job)
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(r.Start.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(r.End.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	builder.WriteString("log=")
	builder.WriteString(r.Log)
	builder.WriteByte(')')
	return builder.String()
}

// Runs is a parsable slice of Run.
type Runs []*Run
