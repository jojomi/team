// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jojomi/team/ent/predicate"
	"github.com/jojomi/team/ent/run"
)

// RunUpdate is the builder for updating Run entities.
type RunUpdate struct {
	config
	hooks    []Hook
	mutation *RunMutation
}

// Where appends a list predicates to the RunUpdate builder.
func (ru *RunUpdate) Where(ps ...predicate.Run) *RunUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetJob sets the "job" field.
func (ru *RunUpdate) SetJob(s string) *RunUpdate {
	ru.mutation.SetJob(s)
	return ru
}

// SetStart sets the "start" field.
func (ru *RunUpdate) SetStart(t time.Time) *RunUpdate {
	ru.mutation.SetStart(t)
	return ru
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (ru *RunUpdate) SetNillableStart(t *time.Time) *RunUpdate {
	if t != nil {
		ru.SetStart(*t)
	}
	return ru
}

// ClearStart clears the value of the "start" field.
func (ru *RunUpdate) ClearStart() *RunUpdate {
	ru.mutation.ClearStart()
	return ru
}

// SetEnd sets the "end" field.
func (ru *RunUpdate) SetEnd(t time.Time) *RunUpdate {
	ru.mutation.SetEnd(t)
	return ru
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (ru *RunUpdate) SetNillableEnd(t *time.Time) *RunUpdate {
	if t != nil {
		ru.SetEnd(*t)
	}
	return ru
}

// ClearEnd clears the value of the "end" field.
func (ru *RunUpdate) ClearEnd() *RunUpdate {
	ru.mutation.ClearEnd()
	return ru
}

// SetStatus sets the "status" field.
func (ru *RunUpdate) SetStatus(r run.Status) *RunUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetLog sets the "log" field.
func (ru *RunUpdate) SetLog(s string) *RunUpdate {
	ru.mutation.SetLog(s)
	return ru
}

// SetNillableLog sets the "log" field if the given value is not nil.
func (ru *RunUpdate) SetNillableLog(s *string) *RunUpdate {
	if s != nil {
		ru.SetLog(*s)
	}
	return ru
}

// ClearLog clears the value of the "log" field.
func (ru *RunUpdate) ClearLog() *RunUpdate {
	ru.mutation.ClearLog()
	return ru
}

// Mutation returns the RunMutation object of the builder.
func (ru *RunUpdate) Mutation() *RunMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RunUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RunUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RunUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RunUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RunUpdate) check() error {
	if v, ok := ru.mutation.Status(); ok {
		if err := run.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Run.status": %w`, err)}
		}
	}
	return nil
}

func (ru *RunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   run.Table,
			Columns: run.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: run.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Job(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: run.FieldJob,
		})
	}
	if value, ok := ru.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldStart,
		})
	}
	if ru.mutation.StartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: run.FieldStart,
		})
	}
	if value, ok := ru.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldEnd,
		})
	}
	if ru.mutation.EndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: run.FieldEnd,
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: run.FieldStatus,
		})
	}
	if value, ok := ru.mutation.Log(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: run.FieldLog,
		})
	}
	if ru.mutation.LogCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: run.FieldLog,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{run.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RunUpdateOne is the builder for updating a single Run entity.
type RunUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RunMutation
}

// SetJob sets the "job" field.
func (ruo *RunUpdateOne) SetJob(s string) *RunUpdateOne {
	ruo.mutation.SetJob(s)
	return ruo
}

// SetStart sets the "start" field.
func (ruo *RunUpdateOne) SetStart(t time.Time) *RunUpdateOne {
	ruo.mutation.SetStart(t)
	return ruo
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableStart(t *time.Time) *RunUpdateOne {
	if t != nil {
		ruo.SetStart(*t)
	}
	return ruo
}

// ClearStart clears the value of the "start" field.
func (ruo *RunUpdateOne) ClearStart() *RunUpdateOne {
	ruo.mutation.ClearStart()
	return ruo
}

// SetEnd sets the "end" field.
func (ruo *RunUpdateOne) SetEnd(t time.Time) *RunUpdateOne {
	ruo.mutation.SetEnd(t)
	return ruo
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableEnd(t *time.Time) *RunUpdateOne {
	if t != nil {
		ruo.SetEnd(*t)
	}
	return ruo
}

// ClearEnd clears the value of the "end" field.
func (ruo *RunUpdateOne) ClearEnd() *RunUpdateOne {
	ruo.mutation.ClearEnd()
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RunUpdateOne) SetStatus(r run.Status) *RunUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetLog sets the "log" field.
func (ruo *RunUpdateOne) SetLog(s string) *RunUpdateOne {
	ruo.mutation.SetLog(s)
	return ruo
}

// SetNillableLog sets the "log" field if the given value is not nil.
func (ruo *RunUpdateOne) SetNillableLog(s *string) *RunUpdateOne {
	if s != nil {
		ruo.SetLog(*s)
	}
	return ruo
}

// ClearLog clears the value of the "log" field.
func (ruo *RunUpdateOne) ClearLog() *RunUpdateOne {
	ruo.mutation.ClearLog()
	return ruo
}

// Mutation returns the RunMutation object of the builder.
func (ruo *RunUpdateOne) Mutation() *RunMutation {
	return ruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RunUpdateOne) Select(field string, fields ...string) *RunUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Run entity.
func (ruo *RunUpdateOne) Save(ctx context.Context) (*Run, error) {
	var (
		err  error
		node *Run
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RunMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RunUpdateOne) SaveX(ctx context.Context) *Run {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RunUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RunUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RunUpdateOne) check() error {
	if v, ok := ruo.mutation.Status(); ok {
		if err := run.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Run.status": %w`, err)}
		}
	}
	return nil
}

func (ruo *RunUpdateOne) sqlSave(ctx context.Context) (_node *Run, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   run.Table,
			Columns: run.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: run.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Run.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, run.FieldID)
		for _, f := range fields {
			if !run.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != run.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Job(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: run.FieldJob,
		})
	}
	if value, ok := ruo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldStart,
		})
	}
	if ruo.mutation.StartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: run.FieldStart,
		})
	}
	if value, ok := ruo.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: run.FieldEnd,
		})
	}
	if ruo.mutation.EndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: run.FieldEnd,
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: run.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.Log(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: run.FieldLog,
		})
	}
	if ruo.mutation.LogCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: run.FieldLog,
		})
	}
	_node = &Run{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{run.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
